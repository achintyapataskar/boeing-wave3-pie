 version: "2.2"
 services:

  apigateway:
    image: zuul-service
    build: zuul-gatewayservice/
    restart: always
    network_mode: host
    depends_on:
    - eurekaserver
    ports:
    - 8092:8092
    expose:
    - 8092

  eurekaserver:
    image: eureka-servcie:latest
    build: eureka-server/
    restart: always
    network_mode: host
    ports:
    - 9091:9091
    expose:
    - 9091

  configserver:
      image: config-servcie:latest
      build: config-server/
      restart: always
      network_mode: host
      ports:
      - 8888:8888
      expose:
      - 8888
  searchservice:
      image: search-service:latest
      build: searchservice/
      restart: always
      network_mode: host
      ports:
      - 8095:8095
      expose:
      - 8095
      depends_on:
      - mongodb
      - configserver
      - eurekaserver
  mongodb:
      image: mongo:3.4-jessie
      container_name: mongodb
      volumes:
      - ./data/db:/data/db
      ports:
      - 27017:27017
      network_mode: host
      hostname: localhost
      restart: always

#	volumes:
#	data:

  recommendation:
      image: recommendation-service:latest
      build: recommendation/
      restart: always
      network_mode: host
      hostname: localhost
      depends_on:
        - eurekaserver
        - configserver
        - neo4j
        - kafka
      ports:
        - 8096:8096
      expose:
        - 8096
      healthcheck:
        test: "exit 0"

  neo4j:
      image: neo4j:latest
      ports:
        - 7474:7474
        - 7687:7687
      container_name: neo4j_docker
      network_mode: host
      hostname: localhost
      restart: always
      volumes:
        - $HOME/neo4j/data:/data
      environment:
        - NEO4J_AUTH=neo4j/pass


  pie-admin-service:
      image: pie-admin-service:1.0.0
      build: admin/
      ports:
      - 8055:8055
      network_mode: host
version: "2"
services:

  apigateway:
    image: zuul-service
    build: zuul-gatewayservice/
    restart: always
    network_mode: host
    depends_on:
    - eurekaserver
    ports:
    - 8092:8092
    expose:
    - 8092

  eurekaserver:
    image: eureka-servcie:latest
    build: eureka-server/
    restart: always
    network_mode: host
    ports:
    - 9091:9091
    expose:
    - 9091

  configserver:
      image: config-servcie:latest
      build: config-server/
      restart: always
      network_mode: host
      ports:
      - 8888:8888
      expose:
      - 8888
  searchservice:
      image: search-service:latest
      build: searchservice/
      restart: always
      network_mode: host
      ports:
      - 8095:8095
      expose:
      - 8095
      depends_on:
      - mongodb
      - configserver
      - eurekaserver
  mongodb:
      image: mongo:3.4-jessie
      container_name: mongodb
      volumes:
      - ~/data/db:/data/db
      ports:
      - 27017:27017
      network_mode: host
      hostname: localhost
      restart: always
 mysqldb:
  image: mysql
  #  restart: always
  environment:
   MYSQL_ROOT_PASSWORD: root123
   MYSQL_DATABASE: springbootdb
  ports:
   - 3306:3306
  network_mode: host
  hostname: localhost
  volumes:
   - data:/var/lib/mysql

 mongo:
  image: mongo:3.4-jessie
  #  restart: always
  ports:
   - 27017:27017
  network_mode: host
  expose:
   - 27017
  hostname: localhost
  volumes:
   - ./data/db:/data/db

 apigateway:
  image: zuul-service
  build: zuul-gatewayservice/
  restart: always
  network_mode: host
  depends_on:
   - eurekaserver
  ports:
   - 8092:8092
  expose:
   - 8092

 eurekaserver:
  image: eureka-servcie:latest
  build: eureka-server/
  restart: always
  network_mode: host
  ports:
   - 9091:9091
  expose:
   - 9091

 configserver:
  image: config-servcie:latest
  build: config-server/
  restart: always
  network_mode: host
  ports:
   - 8888:8888
  expose:
   - 8888

 userlogin:
  image: userlogin-service
  build: userlogin/
  restart: always
  network_mode: host
  depends_on:
   - eurekaserver
   - apigateway
   - configserver
   - mysqldb
   - kafka
  ports:
   - 8098:8098
  expose:
   - 8098

 userreg:
  image: userreg-service
  build: userreg/
  restart: always
  network_mode: host
  depends_on:
   - eurekaserver
   - apigateway
   - configserver
   - mongo
   - kafka
  ports:
   - 8093:8093
  expose:
   - 8093

 kafka:
  image: landoop/fast-data-dev:latest
  ports:
   - 2181:2181
   - 3030:3030
   - 9092:9092
   - 8081:8081
   - 8082:8082
   - 8083:8083
  container_name: kafka_docker
  network_mode: host
  hostname: localhost
  restart: always
  volumes:
   - /home/ubuntu/deployment/KafkaDocker:/data/kafka



# recommendation:
#   image: recommendation-service:latest
#   build: recommendation/
#   restart: always
#   network_mode: host
#   depends_on:
#     - eurekaserver
#     - configserver
#     - neo4j
#   ports:
#     - 8084:8084
#   expose:
#     - 8084

# neo4j:
#     image: neo4j:latest
#     ports:
#       - 7474:7474
#       - 7687:7687
#     container_name: neo4j_docker
#     network_mode: host
#     hostname: localhost
#     restart: always
#     volumes:
#       - ./Desktop/neo4j:/data/db


#
# pie-admin-service:
#     image: pie-admin-service:1.0.0
#     restart: always
#     build: admin/
#     ports:
#     - 8055:8055
#     network_mode: host
 recommendation:
   image: recommendation-service:latest
   build: recommendation/
   restart: always
   network_mode: host
   depends_on:
     - eurekaserver
     - configserver
     - neo4j
   ports:
     - 8084:8084
   expose:
     - 8084

 neo4j:
     image: neo4j:latest
     ports:
       - 7474:7474
       - 7687:7687
     container_name: neo4j_docker
     network_mode: host
     hostname: localhost
     restart: always
     volumes:
       - ./Desktop/neo4j:/data/db



 pie-admin-service:
     image: pie-admin-service:1.0.0
     restart: always
     build: admin/
     ports:
     - 8055:8055
     network_mode: host

#  insurer:
#    image: insurer
#    build: Insurer/
#    restart: always
#    network_mode: host
#    depends_on:
#      - mysqldb
#      - configserver
#      - eurekaserver
#
#    ports:
#      - 8080:8080
#    expose:
#      - 8080

  insurerregservice:
      image: insurerregservice
      build: insurerregservice/
      restart: always
      network_mode: host
      depends_on:
        - mongo
        - configserver
        - eurekaserver
        - apigateway
      ports:
        - 8090:8090
      expose:
        - 8090



  mongo:
      image: mongo:3.4-jessie
      ports:
        - 27017:27017
      container_name: mongo_docker
      restart: always
      network_mode: host
      hostname: localhost
      volumes:
        - ./data/db:/data/db


 insurerregservice:
     image: insurerregservice
     build: insurerregservice/
     restart: always
     network_mode: host
     depends_on:
       - mongo
       - configserver
       - eurekaserver
       - apigateway
     ports:
       - 8090:8090
     expose:
       - 8090
#  mysqldb:
#      image: mysql
#      restart: always
#      environment:
#        MYSQL_ROOT_PASSWORD: root123
#      ports:
#        - 3306:3306
#      network_mode: host
#      hostname: localhost
#      container_name: mysql_docker
#      volumes:
#        - data:/var/lib/mysql



#volumes:
#  data:

# mongo:
#   image: mongo:3.4-jessie
#   ports:
#     - 27017:27017
#   container_name: mongo_docker
#   restart: always
#   network_mode: host
#   hostname: localhost
#   volumes:
#     - ./data/db:/data/db


#  mysqldb:
#    image: mysql
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: root123
#    ports:
#      - 3306:3306
#    network_mode: host
#    hostname: localhost
#    container_name: mysql_docker
#    volumes:
#      - data:/var/lib/mysql

  insurerregservice:
    image: insurerregservice
    build: insurerregservice/
    restart: always
    network_mode: host
    depends_on:
      - mongodb
      - configserver
      - eurekaserver
      - apigateway
    ports:
      - 8090:8090
    expose:
      - 8090



  mongo:
    image: mongo:3.4-jessie
    ports:
      - 27017:27017
    container_name: mongo_docker
    restart: always
    network_mode: host
    hostname: localhost
    volumes:
      - ./data/db:/data/db


#  mysqldb:
#    image: mysql
#    restart: always
#    environment:
#      MYSQL_ROOT_PASSWORD: root123
#    ports:
#      - 3306:3306
#    network_mode: host
#    hostname: localhost
#    container_name: mysql_docker
#    volumes:
#      - data:/var/lib/mysql
#
#volumes:
#  data:
